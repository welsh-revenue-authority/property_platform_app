{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Documentation for the Land and Property Platform This is a proof of concept created by the Welsh Revenue Authority. It contains synthetic data and does not cover the whole of Wales. Find out more about what data is included in the proof of concept . Available APIs Localised land transaction tax calculator at https://land-property-platform.herokuapp.com/LTT_tax Property information at https://land-property-platform.herokuapp.com/property_info","title":"Home"},{"location":"#welcome-to-documentation-for-the-land-and-property-platform","text":"This is a proof of concept created by the Welsh Revenue Authority. It contains synthetic data and does not cover the whole of Wales. Find out more about what data is included in the proof of concept .","title":"Welcome to Documentation for the Land and Property Platform"},{"location":"#available-apis","text":"Localised land transaction tax calculator at https://land-property-platform.herokuapp.com/LTT_tax Property information at https://land-property-platform.herokuapp.com/property_info","title":"Available APIs"},{"location":"is_it_in_wales/","text":"Is it in Wales? Try it out Determine if a property is in wales. Endpoints https://land-property-platform.herokuapp.com/is_it_in_wales Parameters uprn: (integer) The UPRN of the property (don't know it? search here ) Examples Requests Request body: { \"uprn\": 10015308931 } Or curl request: curl -X 'POST' \\ 'https://land-property-platform.herokuapp.com/is_it_in_wales' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"uprn\": 10015308931 }' Or using python: import requests import json uprn = 10015308931 json_data = json.dumps({\"uprn\": uprn}) response = requests.post( \"https://land-property-platform.herokuapp.com/is_it_in_wales\", data=json_data, ) Response Response body example: { \"in_wales\": \"true\" } Response body schema: { \"in_wales\": string } Possible \"in_wales\" values: \"true\" -- The property is in Wales \"false\" -- The property is not in Wales \"partially\" -- The property has been manually flagges as partially in Wales and partially in England","title":"Is it in Wales?"},{"location":"is_it_in_wales/#is-it-in-wales","text":"Try it out Determine if a property is in wales.","title":"Is it in Wales?"},{"location":"is_it_in_wales/#endpoints","text":"https://land-property-platform.herokuapp.com/is_it_in_wales","title":"Endpoints"},{"location":"is_it_in_wales/#parameters","text":"uprn: (integer) The UPRN of the property (don't know it? search here )","title":"Parameters"},{"location":"is_it_in_wales/#examples","text":"","title":"Examples"},{"location":"is_it_in_wales/#requests","text":"Request body: { \"uprn\": 10015308931 } Or curl request: curl -X 'POST' \\ 'https://land-property-platform.herokuapp.com/is_it_in_wales' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"uprn\": 10015308931 }' Or using python: import requests import json uprn = 10015308931 json_data = json.dumps({\"uprn\": uprn}) response = requests.post( \"https://land-property-platform.herokuapp.com/is_it_in_wales\", data=json_data, )","title":"Requests"},{"location":"is_it_in_wales/#response","text":"Response body example: { \"in_wales\": \"true\" } Response body schema: { \"in_wales\": string } Possible \"in_wales\" values: \"true\" -- The property is in Wales \"false\" -- The property is not in Wales \"partially\" -- The property has been manually flagges as partially in Wales and partially in England","title":"Response"},{"location":"property_info/","text":"Property Information API Try it out Find all information on a given property. Endpoints https://land-property-platform.herokuapp.com/property_info Parameters platform_property_id: (integer) The platform_property_id address: (string) The address of the property as found in the database, Examples Requests Request body: { \"address\": \"58, Mountain Road, Pontypandy\" } Or curl request: curl -X 'POST' \\ 'https://land-property-platform.herokuapp.com/property_info' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"platform_property_id\": 6 }' Or using python: import requests import json address = \"58, Mountain Road, Pontypandy\" json_data = json.dumps({\"address\": address}) response = requests.post( \"https://land-property-platform.herokuapp.com/property_info\", data=json_data, ) platform_property_id can be used instead of address. An example request body: { \"platform_property_id\": 6 } Response Response body: { \"identifiers\": { \"uprn\": 10015806605, \"platform_property_id\": 6, \"address\": \"58, Mountain Road, Pontypandy\" }, \"attributes\": { \"attribute_a\": 2, \"buy_to_let\": true, \"attribute_b\": 3, \"tax_zone\": \"north_zone\" }, \"geospatial\": { \"uprn_point_location\": { \"type\": \"Point\", \"coordinates\": [ 257466.86, 326552.57 ] }, \"extent\": \"not in database\" } } Response schema: { # Property identifiers (request will have identified one of these) \"identifiers\": { \"uprn\": integer, \"platform_property_id\": integer, \"address\": string }, # Property attributes \"attributes\": { \"attribute\": attribite value, ... : ... }, # Geospatial information \"geospatial\": { \"uprn_point_location\": geojson | string, \"extent\": geojson | string } } Attributes Attributes contain the know information on the property. Second home Attribute name: \"second_home\" Possible values: true, false Description: If true, the property is not a main residence. Buy_to_let Attribute name: \"buy_to_let\" Possible values: true, false Description: If true, the property is considered a buy-to-let property. Note that a property is not identified as a second home if it is a buy-to-let property. Attribute a Attribute name: \"attribute_a\" Possible values: 1, 2 Description: A placeholder attribute which can hold integer values and has a multiplier effect on LLT. Attribute b Attribute name: \"attribute_b\" Possible values: 1, 2, 3 Description: A placeholder attribute which can hold integer values and has a fixed addition effect on LLT. Tax zone Attribute name: \"tax_zone\" Possible values: \"north_zone\", \"south_zone\" Description: The tax zone that the property resides in. Cross boarder Attribute name: \"cross_boarder\" Possible values: true Description: The property has been flagged as crossing the Wales - England boarder.","title":"Property Information"},{"location":"property_info/#property-information-api","text":"Try it out Find all information on a given property.","title":"Property Information API"},{"location":"property_info/#endpoints","text":"https://land-property-platform.herokuapp.com/property_info","title":"Endpoints"},{"location":"property_info/#parameters","text":"platform_property_id: (integer) The platform_property_id address: (string) The address of the property as found in the database,","title":"Parameters"},{"location":"property_info/#examples","text":"","title":"Examples"},{"location":"property_info/#requests","text":"Request body: { \"address\": \"58, Mountain Road, Pontypandy\" } Or curl request: curl -X 'POST' \\ 'https://land-property-platform.herokuapp.com/property_info' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"platform_property_id\": 6 }' Or using python: import requests import json address = \"58, Mountain Road, Pontypandy\" json_data = json.dumps({\"address\": address}) response = requests.post( \"https://land-property-platform.herokuapp.com/property_info\", data=json_data, ) platform_property_id can be used instead of address. An example request body: { \"platform_property_id\": 6 }","title":"Requests"},{"location":"property_info/#response","text":"Response body: { \"identifiers\": { \"uprn\": 10015806605, \"platform_property_id\": 6, \"address\": \"58, Mountain Road, Pontypandy\" }, \"attributes\": { \"attribute_a\": 2, \"buy_to_let\": true, \"attribute_b\": 3, \"tax_zone\": \"north_zone\" }, \"geospatial\": { \"uprn_point_location\": { \"type\": \"Point\", \"coordinates\": [ 257466.86, 326552.57 ] }, \"extent\": \"not in database\" } } Response schema: { # Property identifiers (request will have identified one of these) \"identifiers\": { \"uprn\": integer, \"platform_property_id\": integer, \"address\": string }, # Property attributes \"attributes\": { \"attribute\": attribite value, ... : ... }, # Geospatial information \"geospatial\": { \"uprn_point_location\": geojson | string, \"extent\": geojson | string } }","title":"Response"},{"location":"property_info/#attributes","text":"Attributes contain the know information on the property.","title":"Attributes"},{"location":"property_info/#second-home","text":"Attribute name: \"second_home\" Possible values: true, false Description: If true, the property is not a main residence.","title":"Second home"},{"location":"property_info/#buy_to_let","text":"Attribute name: \"buy_to_let\" Possible values: true, false Description: If true, the property is considered a buy-to-let property. Note that a property is not identified as a second home if it is a buy-to-let property.","title":"Buy_to_let"},{"location":"property_info/#attribute-a","text":"Attribute name: \"attribute_a\" Possible values: 1, 2 Description: A placeholder attribute which can hold integer values and has a multiplier effect on LLT.","title":"Attribute a"},{"location":"property_info/#attribute-b","text":"Attribute name: \"attribute_b\" Possible values: 1, 2, 3 Description: A placeholder attribute which can hold integer values and has a fixed addition effect on LLT.","title":"Attribute b"},{"location":"property_info/#tax-zone","text":"Attribute name: \"tax_zone\" Possible values: \"north_zone\", \"south_zone\" Description: The tax zone that the property resides in.","title":"Tax zone"},{"location":"property_info/#cross-boarder","text":"Attribute name: \"cross_boarder\" Possible values: true Description: The property has been flagged as crossing the Wales - England boarder.","title":"Cross boarder"}]}